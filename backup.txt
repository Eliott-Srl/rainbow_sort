#include "image.h"
#include "utils.h"

#include <string>
#include <iostream>
#include <dirent.h>
#include <string>

int main() {
    DIR* dir;
    struct dirent* diread;

    std::string path = current_path();
    path.replace(0, 2, "");

    if (path.find("\\") != std::string::npos) {
        int idx = path.find("\\");
        while (path.find("\\") != std::string::npos) {
            idx = path.find("\\", idx);
            path[idx] = '/';
        }
    }
    else {
        ON_ERROR_EXIT(true, "Bad directory");
    }
    /*
    std::string directory_name;
    std::cout << "Where are your files: ";
    std::cin >> directory_name;

    if (directory_name != "") {
        path += "/" + directory_name;
    }*/

    std::string directory = "img";

    path += "/" + directory;
    char* char_path = new char[path.length() + 1];
    strcpy(char_path, path.c_str());

    if ((dir = opendir(char_path)) != NULL) {
        readdir(dir);
        readdir(dir);

        do {
            diread = readdir(dir);
            char local_path[FILENAME_MAX] = "img";
            strcat(local_path, "/");
            strcat(local_path, diread->d_name);

            Image img = Image(local_path);
            if (img.getDatas() != NULL) {
                AveragedChannels ac = AveragedChannels(&img, local_path);
                ac.average();
                ac.hsvtorgb();
                std::cout << local_path << ": " << ac.getRed() << " " << ac.getGreen() << " " << ac.getBlue() << std::endl;
                std::cout << local_path << ": " << ac.getHue() << " " << ac.getValue() << " " << ac.getSaturation() << std::endl;

                char full_path[] = "";
                strcat(full_path, current_path().c_str());
                strcat(full_path, "\\img\\");
                strcat(full_path, diread->d_name);

                char* full_path_final = (char*)malloc(strlen(full_path) + 1);
                strcpy(full_path_final, full_path);

                char rgb_name[] = "";
                strcat(rgb_name, current_path().c_str());
                strcat(rgb_name, "\\img\\");
                strcat(rgb_name, std::to_string(ac.getRed()).c_str());
                strcat(rgb_name, " ");
                strcat(rgb_name, std::to_string(ac.getGreen()).c_str());
                strcat(rgb_name, " ");
                strcat(rgb_name, std::to_string(ac.getBlue()).c_str());
                strcat(rgb_name, ".");
                strcat(rgb_name, ((std::string)diread->d_name).substr(((std::string)diread->d_name).find_last_of(".") + 1).c_str());

                std::cout << full_path_final << std::endl;

                ON_ERROR_EXIT(rename(full_path_final, rgb_name) != 0, "Error renaming file");
                std::cout << ac.getFileName() << ": Done. " << std::endl;

                ac.getImage()->freeImage();

                free(full_path_final);
            }
        } while (diread != NULL);

        closedir(dir);
    }
    else {
        ON_ERROR_EXIT(true, "Couldn't open the directory");
    }
}